// Copyright 2009 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Copyright (c) 2012 Leonhard Gruenschloss (leonhard@gruenschloss.org)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include "rkcommon/math/math.ih"

OSPRAY_BEGIN_ISPC_NAMESPACE

#ifdef OSPRAY_TARGET_SYCL
#include "sobol.inl"
#else
extern const uniform unsigned int Sobol_revMatrices[4 * 32];
extern const uniform unsigned int Sobol_matrices[5 * 52];
#endif

// compute components 1 and 2 of the Sobol'-sequence (count starting from 0)
inline vec2ui Sobol_revSample2(uint32 revIndex)
{
  vec2ui result = make_vec2ui(0);
  for (uniform uint32 i = 0; revIndex; revIndex <<= 1, i += 4) {
    if (revIndex & 0x80000000u) {
      result.x ^= Sobol_revMatrices[i];
      result.y ^= Sobol_revMatrices[i + 1];
    }
  }

  return result;
}

// compute components 1 to 3 of the Sobol'-sequence (count starting from 0)
inline vec3ui Sobol_revSample3(uint32 revIndex)
{
  vec3ui result = make_vec3ui(0);
  for (uniform uint32 i = 0; revIndex; revIndex <<= 1, i += 4) {
    if (revIndex & 0x80000000u) {
      result.x ^= Sobol_revMatrices[i];
      result.y ^= Sobol_revMatrices[i + 1];
      result.z ^= Sobol_revMatrices[i + 2];
    }
  }

  return result;
}

// compute components 1 to 4 of the Sobol'-sequence (count starting from 0)
inline vec4ui Sobol_revSample4(uint32 revIndex)
{
  vec4ui result = make_vec4ui(0);
  for (uniform uint32 i = 0; revIndex; revIndex <<= 1, i += 4) {
    if (revIndex & 0x80000000u) {
      result.x ^= Sobol_revMatrices[i];
      result.y ^= Sobol_revMatrices[i + 1];
      result.z ^= Sobol_revMatrices[i + 2];
      result.w ^= Sobol_revMatrices[i + 3];
    }
  }

  return result;
}

inline uint32 Sobol_sample(uint32 index, uniform uint32 dim)
{
  uint32 res = 0;
  for (uniform uint32 i = dim * 52; index; index >>= 1, i++) {
    if (index & 1)
      res ^= Sobol_matrices[i];
  }

  return res;
}

OSPRAY_END_ISPC_NAMESPACE
